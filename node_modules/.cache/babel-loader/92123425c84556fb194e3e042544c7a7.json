{"ast":null,"code":"var _jsxFileName = \"/home/aakash/Desktop/Atlan---Internship-Challenge/src/components/content/content.component.jsx\";\nimport React from 'react';\nimport Papa from 'papaparse';\nimport InfoBox from '../info-box/info-box.component';\nimport ChartDisplay from '../chart-display/chart-display.component';\nimport './content.styles.css';\n\nclass Content extends React.Component {\n  constructor() {\n    super();\n\n    this.getChartData = () => {\n      Papa.parse('./ipl-csv-dataset/Match.csv', {\n        header: true,\n        download: true,\n        dynamicTyping: true,\n        complete: this.saveMatch\n      });\n      Papa.parse('./ipl-csv-dataset/Player.csv', {\n        header: true,\n        download: true,\n        dynamicTyping: true,\n        complete: this.savePlayer\n      });\n      Papa.parse('./ipl-csv-dataset/Ball_by_Ball.csv', {\n        header: true,\n        download: true,\n        dynamicTyping: true,\n        complete: this.saveBallByBall\n      });\n      /*Papa.parse('./ipl-csv-dataset/Season.csv', {header: true, download: true, dynamicTyping: true, complete: this.saveSeason});\n      Papa.parse('./ipl-csv-dataset/Team.csv', {header: true, download: true, dynamicTyping: true, complete: this.saveTeam});\n      Papa.parse('./ipl-csv-dataset/Player_Match.csv', {header: true, download: true, dynamicTyping: true, complete: this.savePlayerMatch});*/\n    };\n\n    this.saveMatch = result => {\n      this.setState({\n        rawMatch: result\n      });\n      this.dataForChart1();\n      this.dataForChart3();\n      this.dataForChart5();\n      this.dataForChart8();\n      this.dataForInfoBox1and2();\n    };\n\n    this.savePlayer = result => {\n      this.setState({\n        rawPlayer: result\n      });\n      this.dataForChart2();\n      this.dataForChart4();\n      this.dataForChart6();\n    };\n\n    this.saveBallByBall = result => {\n      this.setState({\n        rawBallByBall: result\n      });\n      this.dataForChart7();\n      this.dataForChart9();\n      this.dataForChart10();\n      this.dataForInfoBox3and4();\n    };\n\n    this.dataForChart1 = () => {\n      // Bat or Field Decision\n      let batCount = 0;\n\n      if (Object.keys(this.state.rawMatch).length !== 0) {\n        this.state.rawMatch.data.forEach(element => {\n          if (element.toss_decision === \"bat\") {\n            batCount++;\n          }\n        });\n        this.setState({\n          chartData1: {\n            labels: ['Bat', 'Field'],\n            datasets: [{\n              label: 'Bat or Field Decision',\n              data: [batCount, this.state.rawMatch.data.length - batCount],\n              backgroundColor: ['rgba(121, 85, 72, 0.5)', 'rgba(76, 175, 80, 0.5)'],\n              borderColor: ['rgba(121, 85, 72,1)', 'rgba(76, 175, 80, 1)'],\n              borderWidth: 1\n            }]\n          }\n        });\n      }\n    };\n\n    this.dataForChart2 = () => {\n      var Bowling_Skill = {};\n\n      if (Object.keys(this.state.rawPlayer).length !== 0) {\n        this.state.rawPlayer.data.forEach(element => {\n          if (Bowling_Skill[element.Bowling_Skill] !== undefined) {\n            Bowling_Skill[element.Bowling_Skill] += 1;\n          } else if (element.Bowling_Skill !== undefined) {\n            Bowling_Skill[element.Bowling_Skill] = 1;\n          }\n        });\n        this.setState({\n          chartData2: {\n            labels: [...Object.keys(Bowling_Skill)],\n            datasets: [{\n              label: 'Winner',\n              data: [...Object.values(Bowling_Skill)],\n              backgroundColor: ['rgba(0, 150, 136, 0.5)', 'rgba(0, 150, 136, 0.5)', 'rgba(0, 150, 136, 0.5)', 'rgba(0, 150, 136, 0.5)', 'rgba(0, 150, 136, 0.5)', 'rgba(0, 150, 136, 0.5)', 'rgba(0, 150, 136, 0.5)', 'rgba(0, 150, 136, 0.5)', 'rgba(0, 150, 136, 0.5)', 'rgba(0, 150, 136, 0.5)', 'rgba(0, 150, 136, 0.5)', 'rgba(0, 150, 136, 0.5)', 'rgba(0, 150, 136, 0.5)', 'rgba(0, 150, 136, 0.5)', 'rgba(0, 150, 136, 0.5)'],\n              borderColor: ['rgba(0, 150, 136, 1)', 'rgba(0, 150, 136, 1)', 'rgba(0, 150, 136, 1)', 'rgba(0, 150, 136, 1)', 'rgba(0, 150, 136, 1)', 'rgba(0, 150, 136, 1)', 'rgba(0, 150, 136, 1)', 'rgba(0, 150, 136, 1)', 'rgba(0, 150, 136, 1)', 'rgba(0, 150, 136, 1)', 'rgba(0, 150, 136, 1)', 'rgba(0, 150, 136, 1)', 'rgba(0, 150, 136, 1)', 'rgba(0, 150, 136, 1)', 'rgba(0, 150, 136, 1)'],\n              borderWidth: 1\n            }]\n          }\n        });\n        this.forceUpdate();\n      }\n    };\n\n    this.dataForChart3 = () => {\n      // Result Type\n      let result = {};\n\n      if (Object.keys(this.state.rawMatch).length !== 0) {\n        this.state.rawMatch.data.forEach(element => {\n          if (result[element.result] !== undefined) {\n            result[element.result] += 1;\n          } else {\n            result[element.result] = 1;\n          }\n        });\n        this.setState({\n          chartData3: {\n            labels: [...Object.keys(result)],\n            datasets: [{\n              label: 'Result Type',\n              data: [...Object.values(result)],\n              backgroundColor: ['rgba(58, 55, 52,0.5)', 'rgba(9, 168, 250,0.5)', 'rgba(255, 193, 7, 0.5)', 'rgba(255, 87, 34,0.5)'],\n              borderColor: ['rgba(58, 55, 52,1.0)', 'rgba(9, 168, 250.0)', 'rgba(255, 193, 7, 1)', 'rgba(255, 87, 34,1.0)'],\n              borderWidth: 1\n            }]\n          }\n        });\n        this.forceUpdate();\n      }\n    };\n\n    this.dataForChart4 = () => {\n      // Left or Right Handed Batsmen\n      var handType = {};\n\n      if (Object.keys(this.state.rawPlayer).length !== 0) {\n        handType.Left_Hand = 0;\n        handType.Right_Hand = 0;\n        this.state.rawPlayer.data.forEach(element => {\n          if (element.Batting_Hand === \"Left_Hand\" || element.Batting_Hand === \"Right_Hand\") {\n            handType[element.Batting_Hand] += 1;\n          }\n        });\n        this.setState({\n          chartData4: {\n            labels: [...Object.keys(handType)],\n            datasets: [{\n              label: 'Left or Right Handed Batsmen',\n              data: [...Object.values(handType)],\n              backgroundColor: ['rgba(244, 67, 54, 0.5)', 'rgba(9, 98, 234, 0.5)'],\n              borderColor: ['rgba(244, 67, 54,1)', 'rgba(9, 98, 234, 1)'],\n              borderWidth: 1\n            }]\n          }\n        });\n        this.forceUpdate();\n      }\n    };\n\n    this.dataForChart5 = () => {\n      // Ttoal Matches wins by Per Team\n      var winner = {};\n\n      if (Object.keys(this.state.rawMatch).length !== 0) {\n        this.state.rawMatch.data.forEach(element => {\n          if (winner[element.winner] !== undefined) {\n            winner[element.winner] += 1;\n          } else if (element.winner !== undefined) {\n            winner[element.winner] = 1;\n          }\n        });\n        this.setState({\n          chartData5: {\n            labels: [...Object.keys(winner)],\n            datasets: [{\n              label: 'Winner',\n              data: [...Object.values(winner)],\n              backgroundColor: ['rgba(0, 150, 136, 0.5)', 'rgba(0, 150, 136, 0.5)', 'rgba(0, 150, 136, 0.5)', 'rgba(0, 150, 136, 0.5)', 'rgba(0, 150, 136, 0.5)', 'rgba(0, 150, 136, 0.5)', 'rgba(0, 150, 136, 0.5)', 'rgba(0, 150, 136, 0.5)', 'rgba(0, 150, 136, 0.5)', 'rgba(0, 150, 136, 0.5)', 'rgba(0, 150, 136, 0.5)', 'rgba(0, 150, 136, 0.5)', 'rgba(0, 150, 136, 0.5)', 'rgba(0, 150, 136, 0.5)', 'rgba(0, 150, 136, 0.5)'],\n              borderColor: ['rgba(0, 150, 136, 1)', 'rgba(0, 150, 136, 1)', 'rgba(0, 150, 136, 1)', 'rgba(0, 150, 136, 1)', 'rgba(0, 150, 136, 1)', 'rgba(0, 150, 136, 1)', 'rgba(0, 150, 136, 1)', 'rgba(0, 150, 136, 1)', 'rgba(0, 150, 136, 1)', 'rgba(0, 150, 136, 1)', 'rgba(0, 150, 136, 1)', 'rgba(0, 150, 136, 1)', 'rgba(0, 150, 136, 1)', 'rgba(0, 150, 136, 1)', 'rgba(0, 150, 136, 1)'],\n              borderWidth: 1\n            }]\n          }\n        });\n        this.forceUpdate();\n      }\n    };\n\n    this.dataForChart6 = () => {\n      // Player Nationality\n      var nationality = {};\n\n      if (Object.keys(this.state.rawPlayer).length !== 0) {\n        this.state.rawPlayer.data.forEach(element => {\n          if (nationality[element.Country] !== undefined) {\n            nationality[element.Country] += 1;\n          } else if (element.Country !== undefined && element.Is_Umpire !== \"1\") {\n            nationality[element.Country] = 1;\n          }\n        });\n        this.setState({\n          chartData6: {\n            labels: [...Object.keys(nationality)],\n            datasets: [{\n              label: 'Player Nationality',\n              data: [...Object.values(nationality)],\n              backgroundColor: ['rgba(255, 99, 132, 0.5)', 'rgba(54, 162, 235, 0.5)', 'rgba(245, 135, 31, 0.5)', 'rgba(128, 203, 174, 0.5)', 'rgba(255, 99, 132, 0.5)', 'rgba(54, 162, 235, 0.5)', 'rgba(255, 206, 86, 0.5)', 'rgba(75, 192, 192, 0.5)', 'rgba(153, 102, 255, 0.5)', 'rgba(255, 159, 64, 0.5)', 'rgba(255, 99, 132, 0.5)', 'rgba(54, 162, 235, 0.5)', 'rgba(245, 135, 31, 0.5)', 'rgba(128, 203, 174, 0.5)'],\n              borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(245, 135, 31, 1)', 'rgba(128, 203, 174, 1)', 'rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)', 'rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(245, 135, 31, 1)', 'rgba(128, 203, 174, 1)'],\n              borderWidth: 1\n            }]\n          }\n        });\n        this.forceUpdate();\n      }\n    };\n\n    this.dataForChart7 = () => {\n      // Average runs per over\n      let averages = {};\n\n      if (Object.keys(this.state.rawBallByBall).length !== 0) {\n        this.state.rawBallByBall.data.forEach(element => {\n          if (averages[element.Over_Id] !== undefined && element.Batsman_Scored !== 'Do_nothing' && element.Batsman_Scored !== ' ') {\n            averages[element.Over_Id] = {\n              sum: averages[element.Over_Id].sum + element.Batsman_Scored,\n              count: averages[element.Over_Id].count + 1\n            };\n          } else if (element.Over_Id !== undefined && element.Batsman_Scored !== 'Do_nothing' && element.Batsman_Scored !== ' ') {\n            averages[element.Over_Id] = {\n              sum: element.Batsman_Scored,\n              count: 1\n            };\n          }\n        });\n        Object.entries(averages).forEach(element => {\n          console.log(element);\n          averages[element[0]] = parseFloat(element[1].sum) / element[1].count;\n        });\n        this.setState({\n          chartData7: {\n            labels: [...Object.keys(averages)],\n            datasets: [{\n              label: 'Average Runs Every Over',\n              data: [...Object.values(averages)],\n              backgroundColor: ['rgba(0, 150, 136, 0.5)'],\n              borderColor: ['rgba(103, 58, 183,1)'],\n              borderWidth: 1\n            }]\n          }\n        });\n        this.forceUpdate();\n      }\n    };\n\n    this.dataForChart8 = () => {\n      //Toss Winners\n      var toss_winner = {};\n\n      if (Object.keys(this.state.rawMatch).length !== 0) {\n        this.state.rawMatch.data.forEach(element => {\n          if (toss_winner[element.toss_winner] !== undefined) {\n            toss_winner[element.toss_winner] += 1;\n          } else if (element.toss_winner !== undefined && element.toss_winner !== ' ') {\n            toss_winner[element.toss_winner] = 1;\n          }\n        });\n        this.setState({\n          chartData8: {\n            labels: [...Object.keys(toss_winner)],\n            datasets: [{\n              label: 'Toss Win',\n              data: [...Object.values(toss_winner)],\n              backgroundColor: ['rgba(233, 30, 99, 0.5)', 'rgba(233, 30, 99, 0.5)', 'rgba(233, 30, 99, 0.5)', 'rgba(233, 30, 99, 0.5)', 'rgba(233, 30, 99, 0.5)', 'rgba(233, 30, 99, 0.5)', 'rgba(233, 30, 99, 0.5)', 'rgba(233, 30, 99, 0.5)', 'rgba(233, 30, 99, 0.5)', 'rgba(233, 30, 99, 0.5)', 'rgba(233, 30, 99, 0.5)', 'rgba(233, 30, 99, 0.5)', 'rgba(233, 30, 99, 0.5)', 'rgba(233, 30, 99, 0.5)'],\n              borderColor: ['rgba(233, 30, 99, 1)', 'rgba(233, 30, 99, 1)', 'rgba(233, 30, 99, 1)', 'rgba(233, 30, 99, 1)', 'rgba(233, 30, 99, 1)', 'rgba(233, 30, 99, 1)', 'rgba(233, 30, 99, 1)', 'rgba(233, 30, 99, 1)', 'rgba(233, 30, 99, 1)', 'rgba(233, 30, 99, 1)', 'rgba(233, 30, 99, 1)', 'rgba(233, 30, 99, 1)', 'rgba(233, 30, 99, 1)', 'rgba(233, 30, 99, 1)'],\n              borderWidth: 1\n            }]\n          }\n        });\n        this.forceUpdate();\n      }\n    };\n\n    this.dataForChart9 = () => {\n      // Host Countries\n      let city = {};\n\n      if (Object.keys(this.state.rawMatch).length !== 2) {\n        this.state.rawMatch.data.forEach(element => {\n          if (city[element.city] !== undefined) {\n            city[element.city] += 1;\n          } else {\n            city[element.city] = 1;\n          }\n        });\n        this.setState({\n          chartData9: {\n            labels: [...Object.keys(city)],\n            datasets: [{\n              label: 'Host Countries',\n              data: [...Object.values(city)],\n              backgroundColor: ['rgba(33, 150, 243,0.5)', 'rgba(76, 175, 80,0.5)', 'rgba(244, 67, 54,0.5)', 'rgba(33, 150, 243,0.5)', 'rgba(76, 175, 80,0.5)', 'rgba(244, 67, 54,0.5)', 'rgba(33, 150, 243,0.5)', 'rgba(76, 175, 80,0.5)', 'rgba(244, 67, 54,0.5)', 'rgba(33, 150, 243,0.5)', 'rgba(76, 175, 80,0.5)', 'rgba(244, 67, 54,0.5)', 'rgba(33, 150, 243,0.5)', 'rgba(76, 175, 80,0.5)', 'rgba(244, 67, 54,0.5)', 'rgba(33, 150, 243,0.5)', 'rgba(76, 175, 80,0.5)', 'rgba(244, 67, 54,0.5)', 'rgba(33, 150, 243,0.5)', 'rgba(76, 175, 80,0.5)', 'rgba(244, 67, 54,0.5)', 'rgba(33, 150, 243,0.5)', 'rgba(76, 175, 80,0.5)', 'rgba(244, 67, 54,0.5)', 'rgba(33, 150, 243,0.5)', 'rgba(76, 175, 80,0.5)', 'rgba(244, 67, 54,0.5)'],\n              borderColor: ['rgba(33, 150, 243,1.0)', 'rgba(76, 175, 80,1.0)', 'rgba(244, 67, 54,1.0)', 'rgba(33, 150, 243,1.0)', 'rgba(76, 175, 80,1.0)', 'rgba(244, 67, 54,1.0)', 'rgba(33, 150, 243,1.0)', 'rgba(76, 175, 80,1.0)', 'rgba(244, 67, 54,1.0)', 'rgba(33, 150, 243,1.0)', 'rgba(76, 175, 80,1.0)', 'rgba(244, 67, 54,1.0)', 'rgba(33, 150, 243,1.0)', 'rgba(76, 175, 80,1.0)', 'rgba(244, 67, 54,1.0)', 'rgba(33, 150, 243,1.0)', 'rgba(76, 175, 80,1.0)', 'rgba(244, 67, 54,1.0)', 'rgba(33, 150, 243,1.0)', 'rgba(76, 175, 80,1.0)', 'rgba(244, 67, 54,1.0)'],\n              borderWidth: 1\n            }]\n          }\n        });\n        this.forceUpdate();\n      }\n    };\n\n    this.dataForChart10 = () => {\n      var dismissalType = {};\n\n      if (Object.keys(this.state.rawBallByBall).length !== 0) {\n        this.state.rawBallByBall.data.forEach(element => {\n          if (dismissalType[element.Dissimal_Type] !== undefined) {\n            dismissalType[element.Dissimal_Type] += 1;\n          } else if (element.Dissimal_Type !== undefined && element.Dissimal_Type !== ' ') {\n            dismissalType[element.Dissimal_Type] = 1;\n          }\n        });\n        this.setState({\n          chartData10: {\n            labels: [...Object.keys(dismissalType)],\n            datasets: [{\n              label: 'Types of Dismissals',\n              data: [...Object.values(dismissalType)],\n              backgroundColor: ['rgba(233, 30, 99, 0.5)', 'rgba(233, 30, 99, 0.5)', 'rgba(233, 30, 99, 0.5)', 'rgba(233, 30, 99, 0.5)', 'rgba(233, 30, 99, 0.5)', 'rgba(233, 30, 99, 0.5)', 'rgba(233, 30, 99, 0.5)', 'rgba(233, 30, 99, 0.5)', 'rgba(233, 30, 99, 0.5)', 'rgba(233, 30, 99, 0.5)', 'rgba(233, 30, 99, 0.5)', 'rgba(233, 30, 99, 0.5)', 'rgba(233, 30, 99, 0.5)', 'rgba(233, 30, 99, 0.5)'],\n              borderColor: ['rgba(233, 30, 99, 1)', 'rgba(233, 30, 99, 1)', 'rgba(233, 30, 99, 1)', 'rgba(233, 30, 99, 1)', 'rgba(233, 30, 99, 1)', 'rgba(233, 30, 99, 1)', 'rgba(233, 30, 99, 1)', 'rgba(233, 30, 99, 1)', 'rgba(233, 30, 99, 1)', 'rgba(233, 30, 99, 1)', 'rgba(233, 30, 99, 1)', 'rgba(233, 30, 99, 1)', 'rgba(233, 30, 99, 1)', 'rgba(233, 30, 99, 1)'],\n              borderWidth: 1\n            }]\n          }\n        });\n        this.forceUpdate();\n      }\n    };\n\n    this.dataForInfoBox1and2 = () => {\n      // Number of Superovers\n      let superovers = 0;\n\n      if (Object.keys(this.state.rawMatch).length !== 0) {\n        // Number of Matches\n        this.setState({\n          infoBox1: this.state.rawMatch.data.length - 1\n        });\n\n        for (var i = 0; i < this.state.rawMatch.data.length; i++) {\n          if (this.state.rawMatch.data[i].result === 'tie') {\n            superovers++;\n          }\n        }\n\n        this.setState({\n          infoBox2: superovers\n        });\n      }\n    };\n\n    this.dataForInfoBox3and4 = () => {\n      // Number of Fours\n      let fours = 0;\n      let sixes = 0;\n\n      if (Object.keys(this.state.rawBallByBall).length !== 0) {\n        this.state.rawBallByBall.data.forEach(element => {\n          if (element.Batsman_Scored === 4) {\n            fours++;\n          } else if (element.Batsman_Scored === 6) {\n            sixes++;\n          }\n        });\n        this.setState({\n          infoBox3: fours,\n          infoBox4: sixes\n        });\n      }\n\n      this.forceUpdate();\n    };\n\n    this.state = {\n      chartData1: {},\n      chartData2: {},\n      chartData3: {},\n      chartData4: {},\n      chartData5: {},\n      chartData6: {},\n      chartData7: {},\n      chartData8: {},\n      chartData9: {},\n      chartData10: {},\n      rawMatch: {},\n      rawPlayer: {},\n      rawBallByBall: {}\n      /*rawSeason: {},\n      rawTeam: {},\n      rawPlayerMatch: {},*/\n\n    };\n  }\n\n  componentDidMount() {\n    this.getChartData();\n  } // Converting CSV file to JSON data\n\n\n  render() {\n    /*==== Calculates current width of browser ====*/\n    let w = window,\n        d = document,\n        e = d.documentElement,\n        g = d.getElementsByTagName('body')[0],\n        x = w.innerWidth || e.clientWidth || g.clientWidth;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"title-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 25\n      }\n    }, \"Indian Premier League\"), \" Statistics\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"infobox-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(InfoBox, {\n      data: this.state.infoBox1,\n      title: \"Total Matches\",\n      icon: /*#__PURE__*/React.createElement(\"i\", {\n        className: \"fas fa-cricket fa-4x\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 675,\n          columnNumber: 85\n        }\n      }),\n      text: \"Matches played till now.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 675,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(InfoBox, {\n      data: this.state.infoBox2,\n      title: \"Total Superovers\",\n      icon: /*#__PURE__*/React.createElement(\"i\", {\n        className: \"fas fa-cricket fa-4x\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 676,\n          columnNumber: 88\n        }\n      }),\n      text: \"Number of tie matches till now.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(InfoBox, {\n      data: this.state.infoBox3,\n      title: \"Total Fours\",\n      icon: /*#__PURE__*/React.createElement(\"i\", {\n        className: \"fas fa-cricket fa-4x\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 677,\n          columnNumber: 83\n        }\n      }),\n      text: \"Number of balls hitting the boundary.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(InfoBox, {\n      data: this.state.infoBox4,\n      title: \"Total Sixes\",\n      icon: /*#__PURE__*/React.createElement(\"i\", {\n        className: \"fas fa-cricket fa-4x\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 678,\n          columnNumber: 83\n        }\n      }),\n      text: \"Number of balls crossing the boundary.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"graph-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ChartDisplay, {\n      selectChart: \"bar\",\n      displayLegend: false,\n      chartData: this.state.chartData1,\n      titleText: \"Batting / Fielding Decision\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(ChartDisplay, {\n      selectChart: \"horizontalBar\",\n      displayLegend: false,\n      chartData: this.state.chartData2,\n      titleText: \"Bowling Skill\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(ChartDisplay, {\n      selectChart: \"doughnut\",\n      chartData: this.state.chartData3,\n      titleText: \"Result Type\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 694,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(ChartDisplay, {\n      selectChart: \"pie\",\n      chartData: this.state.chartData4,\n      titleText: \"Left / Right Handed Batsmen\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 699,\n        columnNumber: 22\n      }\n    }), /*#__PURE__*/React.createElement(ChartDisplay, {\n      selectChart: \"horizontalBar\",\n      displayLegend: false,\n      chartData: this.state.chartData5,\n      titleText: \"Total Matches win\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 704,\n        columnNumber: 22\n      }\n    }), /*#__PURE__*/React.createElement(ChartDisplay, {\n      selectChart: \"horizontalBar\",\n      displayLegend: false,\n      chartData: this.state.chartData6,\n      titleText: \"Player Nationality\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 710,\n        columnNumber: 24\n      }\n    }), /*#__PURE__*/React.createElement(ChartDisplay, {\n      selectChart: \"line\",\n      chartData: this.state.chartData7,\n      titleText: \"Average Runs Every Over\",\n      selectLabel: true,\n      selectLabelText: \"Overs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 716,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(ChartDisplay, {\n      selectChart: x < 900 ? 'horizontalBar' : 'bar',\n      displayLegend: false,\n      chartData: this.state.chartData8,\n      titleText: \"Toss winners\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 723,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(ChartDisplay, {\n      selectChart: \"bar\",\n      chartData: this.state.chartData9,\n      titleText: \"Matches city\",\n      displayLegend: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 728,\n        columnNumber: 22\n      }\n    }), /*#__PURE__*/React.createElement(ChartDisplay, {\n      selectChart: \"horizontalBar\",\n      displayLegend: false,\n      chartData: this.state.chartData10,\n      titleText: \"Type of  Dismissal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 736,\n        columnNumber: 22\n      }\n    })));\n  }\n\n}\n\nexport default Content;","map":{"version":3,"sources":["/home/aakash/Desktop/Atlan---Internship-Challenge/src/components/content/content.component.jsx"],"names":["React","Papa","InfoBox","ChartDisplay","Content","Component","constructor","getChartData","parse","header","download","dynamicTyping","complete","saveMatch","savePlayer","saveBallByBall","result","setState","rawMatch","dataForChart1","dataForChart3","dataForChart5","dataForChart8","dataForInfoBox1and2","rawPlayer","dataForChart2","dataForChart4","dataForChart6","rawBallByBall","dataForChart7","dataForChart9","dataForChart10","dataForInfoBox3and4","batCount","Object","keys","state","length","data","forEach","element","toss_decision","chartData1","labels","datasets","label","backgroundColor","borderColor","borderWidth","Bowling_Skill","undefined","chartData2","values","forceUpdate","chartData3","handType","Left_Hand","Right_Hand","Batting_Hand","chartData4","winner","chartData5","nationality","Country","Is_Umpire","chartData6","averages","Over_Id","Batsman_Scored","sum","count","entries","console","log","parseFloat","chartData7","toss_winner","chartData8","city","chartData9","dismissalType","Dissimal_Type","chartData10","superovers","infoBox1","i","infoBox2","fours","sixes","infoBox3","infoBox4","componentDidMount","render","w","window","d","document","e","documentElement","g","getElementsByTagName","x","innerWidth","clientWidth"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Papa from 'papaparse';\n\nimport InfoBox from '../info-box/info-box.component';\nimport ChartDisplay from '../chart-display/chart-display.component';\n\nimport './content.styles.css';\n\nclass Content extends React.Component {\n    constructor(){\n        super();\n        this.state = {\n            chartData1: {},\n            chartData2: {},\n            chartData3: {},\n            chartData4: {},\n            chartData5: {},\n            chartData6: {},\n            chartData7: {},\n            chartData8: {},\n            chartData9: {},\n            chartData10: {},\n            rawMatch: {},\n            rawPlayer: {},\n            rawBallByBall: {}\n            /*rawSeason: {},\n            rawTeam: {},\n            rawPlayerMatch: {},*/\n        };\n    }\n\n    componentDidMount(){\n        this.getChartData();\n    }\n\n    // Converting CSV file to JSON data\n    getChartData = () => {\n        Papa.parse('./ipl-csv-dataset/Match.csv', {\n            header: true,\n            download: true,\n            dynamicTyping: true,\n            complete: this.saveMatch\n        });\n        Papa.parse('./ipl-csv-dataset/Player.csv', {\n            header: true,\n            download: true,\n            dynamicTyping: true,\n            complete: this.savePlayer\n        });\n        Papa.parse('./ipl-csv-dataset/Ball_by_Ball.csv', {\n            header: true,\n            download: true,\n            dynamicTyping: true,\n            complete: this.saveBallByBall\n        });\n        /*Papa.parse('./ipl-csv-dataset/Season.csv', {header: true, download: true, dynamicTyping: true, complete: this.saveSeason});\n        Papa.parse('./ipl-csv-dataset/Team.csv', {header: true, download: true, dynamicTyping: true, complete: this.saveTeam});\n        Papa.parse('./ipl-csv-dataset/Player_Match.csv', {header: true, download: true, dynamicTyping: true, complete: this.savePlayerMatch});*/\n    }\n\n    // Saving JSON data to state and calling associated functions to process data\n    saveMatch = (result) => {\n        this.setState({ rawMatch: result });\n        this.dataForChart1();\n        this.dataForChart3();\n       \n        this.dataForChart5();\n        this.dataForChart8();\n        \n        this.dataForInfoBox1and2();\n    }\n    savePlayer = (result) => {\n        this.setState({ rawPlayer: result });\n       \n        this.dataForChart2();\n        this.dataForChart4();\n        this.dataForChart6();\n    }\n    saveBallByBall = (result) => {\n        this.setState({ rawBallByBall: result });\n        this.dataForChart7();\n        this.dataForChart9();\n        this.dataForChart10();\n        this.dataForInfoBox3and4();\n        \n    }\n    /*saveSeason = (result) => {this.setState({rawSeason: result});}\n    saveTeam = (result) => {this.setState({rawTeam: result});}\n    savePlayerMatch = (result) => {this.setState({rawPlayerMatch: result});}*/\n\n    dataForChart1 = () => {\n        // Bat or Field Decision\n        let batCount = 0;\n        if(Object.keys(this.state.rawMatch).length !== 0){\n            this.state.rawMatch.data.forEach(element => {\n                if(element.toss_decision === \"bat\"){\n                    batCount++;\n                }\n            });\n\n            this.setState({\n                chartData1: {\n                    labels: ['Bat', 'Field'],\n                    datasets: [\n                        {\n                            label: 'Bat or Field Decision',\n                            data: [batCount, this.state.rawMatch.data.length - batCount],\n                            backgroundColor: [\n                                'rgba(121, 85, 72, 0.5)',\n                                'rgba(76, 175, 80, 0.5)'\n                            ],\n                            borderColor: [\n                                'rgba(121, 85, 72,1)',\n                                'rgba(76, 175, 80, 1)'\n                            ],\n                            borderWidth: 1\n                        }\n                    ]\n                }\n            });\n        }\n    }\n\n    dataForChart2 = () => {\n        var Bowling_Skill = {};\n        if(Object.keys(this.state.rawPlayer).length !== 0){\n            this.state.rawPlayer.data.forEach(element => {\n                if(Bowling_Skill[element.Bowling_Skill] !== undefined) {\n                    Bowling_Skill[element.Bowling_Skill] += 1;\n                } else if(element.Bowling_Skill !== undefined ) {\n                    Bowling_Skill[element.Bowling_Skill] = 1;\n                }\n            });\n\n            this.setState({\n                chartData2: {\n                    labels: [...Object.keys(Bowling_Skill)],\n                    datasets: [\n                        {\n                            label: 'Winner',\n                            data: [...Object.values(Bowling_Skill)],\n                            backgroundColor: [\n                                'rgba(0, 150, 136, 0.5)',\n                                'rgba(0, 150, 136, 0.5)',\n                                'rgba(0, 150, 136, 0.5)',\n                                'rgba(0, 150, 136, 0.5)',\n                                'rgba(0, 150, 136, 0.5)',\n                                'rgba(0, 150, 136, 0.5)',\n                                'rgba(0, 150, 136, 0.5)',\n                                'rgba(0, 150, 136, 0.5)',\n                                'rgba(0, 150, 136, 0.5)',\n                                'rgba(0, 150, 136, 0.5)',\n                                'rgba(0, 150, 136, 0.5)',\n                                'rgba(0, 150, 136, 0.5)',\n                                'rgba(0, 150, 136, 0.5)',\n                                'rgba(0, 150, 136, 0.5)',\n                                'rgba(0, 150, 136, 0.5)'\n                            ],\n                            borderColor: [\n                                'rgba(0, 150, 136, 1)',\n                                'rgba(0, 150, 136, 1)',\n                                'rgba(0, 150, 136, 1)',\n                                'rgba(0, 150, 136, 1)',\n                                'rgba(0, 150, 136, 1)',\n                                'rgba(0, 150, 136, 1)',\n                                'rgba(0, 150, 136, 1)',\n                                'rgba(0, 150, 136, 1)',\n                                'rgba(0, 150, 136, 1)',\n                                'rgba(0, 150, 136, 1)',\n                                'rgba(0, 150, 136, 1)',\n                                'rgba(0, 150, 136, 1)',\n                                'rgba(0, 150, 136, 1)',\n                                'rgba(0, 150, 136, 1)',\n                                'rgba(0, 150, 136, 1)'\n                            ],\n                            borderWidth: 1\n                        }\n                    ]\n                }\n            });\n            this.forceUpdate();\n        }\n    }\n\n\n    dataForChart3 = () => {\n        // Result Type\n        let result = {};\n        if(Object.keys(this.state.rawMatch).length !== 0){\n            this.state.rawMatch.data.forEach(element => {\n                if(result[element.result] !== undefined) {\n                    result[element.result] += 1;\n                } else {\n                    result[element.result] = 1;\n                }\n            });\n\n            this.setState({\n                chartData3: {\n                    labels: [...Object.keys(result)],\n                    datasets: [\n                        {\n                            label: 'Result Type',\n                            data: [...Object.values(result)],\n                            backgroundColor: [\n                                'rgba(58, 55, 52,0.5)',\n                                'rgba(9, 168, 250,0.5)',\n                                'rgba(255, 193, 7, 0.5)',\n                                'rgba(255, 87, 34,0.5)'\n                            ],\n                            borderColor: [\n                                'rgba(58, 55, 52,1.0)',\n                                'rgba(9, 168, 250.0)',\n                                'rgba(255, 193, 7, 1)',\n                                'rgba(255, 87, 34,1.0)'\n                            ],\n                            borderWidth: 1\n                        }\n                    ]\n                }\n            });\n            this.forceUpdate();\n        }\n    }\n\n    dataForChart4 = () => {\n        // Left or Right Handed Batsmen\n        var handType = {};\n        if(Object.keys(this.state.rawPlayer).length !== 0){\n            handType.Left_Hand = 0;\n            handType.Right_Hand = 0;\n            this.state.rawPlayer.data.forEach(element => {\n                if(element.Batting_Hand === \"Left_Hand\" || element.Batting_Hand === \"Right_Hand\") {\n                    handType[element.Batting_Hand] += 1;\n                }\n            });\n\n            this.setState({\n                chartData4: {\n                    labels: [...Object.keys(handType)],\n                    datasets: [\n                        {\n                            label: 'Left or Right Handed Batsmen',\n                            data: [...Object.values(handType)],\n                            backgroundColor: [\n                                'rgba(244, 67, 54, 0.5)',\n                                'rgba(9, 98, 234, 0.5)'\n                            ],\n                            borderColor: [\n                                'rgba(244, 67, 54,1)',\n                                'rgba(9, 98, 234, 1)'\n                            ],\n                            borderWidth: 1\n                        }\n                    ]\n                }\n            });\n            this.forceUpdate();\n        }\n    }\n    dataForChart5 = () => {\n        // Ttoal Matches wins by Per Team\n        var winner = {};\n        if(Object.keys(this.state.rawMatch).length !== 0){\n            this.state.rawMatch.data.forEach(element => {\n                if(winner[element.winner] !== undefined) {\n                    winner[element.winner] += 1;\n                } else if(element.winner !== undefined ) {\n                    winner[element.winner] = 1;\n                }\n            });\n\n            this.setState({\n                chartData5: {\n                    labels: [...Object.keys(winner)],\n                    datasets: [\n                        {\n                            label: 'Winner',\n                            data: [...Object.values(winner)],\n                            backgroundColor: [\n                                'rgba(0, 150, 136, 0.5)',\n                                'rgba(0, 150, 136, 0.5)',\n                                'rgba(0, 150, 136, 0.5)',\n                                'rgba(0, 150, 136, 0.5)',\n                                'rgba(0, 150, 136, 0.5)',\n                                'rgba(0, 150, 136, 0.5)',\n                                'rgba(0, 150, 136, 0.5)',\n                                'rgba(0, 150, 136, 0.5)',\n                                'rgba(0, 150, 136, 0.5)',\n                                'rgba(0, 150, 136, 0.5)',\n                                'rgba(0, 150, 136, 0.5)',\n                                'rgba(0, 150, 136, 0.5)',\n                                'rgba(0, 150, 136, 0.5)',\n                                'rgba(0, 150, 136, 0.5)',\n                                'rgba(0, 150, 136, 0.5)'\n                            ],\n                            borderColor: [\n                                'rgba(0, 150, 136, 1)',\n                                'rgba(0, 150, 136, 1)',\n                                'rgba(0, 150, 136, 1)',\n                                'rgba(0, 150, 136, 1)',\n                                'rgba(0, 150, 136, 1)',\n                                'rgba(0, 150, 136, 1)',\n                                'rgba(0, 150, 136, 1)',\n                                'rgba(0, 150, 136, 1)',\n                                'rgba(0, 150, 136, 1)',\n                                'rgba(0, 150, 136, 1)',\n                                'rgba(0, 150, 136, 1)',\n                                'rgba(0, 150, 136, 1)',\n                                'rgba(0, 150, 136, 1)',\n                                'rgba(0, 150, 136, 1)',\n                                'rgba(0, 150, 136, 1)'\n                            ],\n                            borderWidth: 1\n                        }\n                    ]\n                }\n            });\n            this.forceUpdate();\n        }\n    }\n\n    dataForChart6 = () => {\n        // Player Nationality\n        var nationality = {};\n        if(Object.keys(this.state.rawPlayer).length !== 0){\n            this.state.rawPlayer.data.forEach(element => {\n                if(nationality[element.Country] !== undefined) {\n                    nationality[element.Country] += 1;\n                } else if(element.Country !== undefined && element.Is_Umpire !== \"1\") {\n                    nationality[element.Country] = 1;\n                }\n            });\n\n            this.setState({\n                chartData6: {\n                    labels: [...Object.keys(nationality)],\n                    datasets: [\n                        {\n                            label: 'Player Nationality',\n                            data: [...Object.values(nationality)],\n                            backgroundColor: [\n                                'rgba(255, 99, 132, 0.5)',\n                                'rgba(54, 162, 235, 0.5)',\n                                'rgba(245, 135, 31, 0.5)',\n                                'rgba(128, 203, 174, 0.5)',\n                                'rgba(255, 99, 132, 0.5)',\n                                'rgba(54, 162, 235, 0.5)',\n                                'rgba(255, 206, 86, 0.5)',\n                                'rgba(75, 192, 192, 0.5)',\n                                'rgba(153, 102, 255, 0.5)',\n                                'rgba(255, 159, 64, 0.5)',\n                                'rgba(255, 99, 132, 0.5)',\n                                'rgba(54, 162, 235, 0.5)',\n                                'rgba(245, 135, 31, 0.5)',\n                                'rgba(128, 203, 174, 0.5)'\n                            ],\n                            borderColor: [\n                                'rgba(255, 99, 132, 1)',\n                                'rgba(54, 162, 235, 1)',\n                                'rgba(245, 135, 31, 1)',\n                                'rgba(128, 203, 174, 1)',\n                                'rgba(255, 99, 132, 1)',\n                                'rgba(54, 162, 235, 1)',\n                                'rgba(255, 206, 86, 1)',\n                                'rgba(75, 192, 192, 1)',\n                                'rgba(153, 102, 255, 1)',\n                                'rgba(255, 159, 64, 1)',\n                                'rgba(255, 99, 132, 1)',\n                                'rgba(54, 162, 235, 1)',\n                                'rgba(245, 135, 31, 1)',\n                                'rgba(128, 203, 174, 1)'\n                            ],\n                            borderWidth: 1\n                        }\n                    ]\n                }\n            });\n            this.forceUpdate();\n        }\n    }\n\n    dataForChart7 = () => {\n        // Average runs per over\n        let averages = {};\n\n        if(Object.keys(this.state.rawBallByBall).length !== 0) {\n            this.state.rawBallByBall.data.forEach(element => {\n                if(averages[element.Over_Id] !== undefined && element.Batsman_Scored !== 'Do_nothing' && element.Batsman_Scored !== ' ') {\n                    averages[element.Over_Id] = { sum : averages[element.Over_Id].sum + element.Batsman_Scored, count : averages[element.Over_Id].count + 1 };\n                } else if(element.Over_Id !== undefined && element.Batsman_Scored !== 'Do_nothing' && element.Batsman_Scored !== ' ') {\n                    averages[element.Over_Id] = { sum : element.Batsman_Scored, count : 1 };\n                }\n            });\n\n            Object.entries(averages).forEach(element => {\n                console.log(element);\n                averages[element[0]] = parseFloat(element[1].sum) / element[1].count;\n            });\n\n            this.setState({\n                chartData7: {\n                    labels: [...Object.keys(averages)],\n                    datasets: [\n                        {\n                            label: 'Average Runs Every Over',\n                            data: [...Object.values(averages)],\n                            backgroundColor: [\n                                'rgba(0, 150, 136, 0.5)',\n                            ],\n                            borderColor: [\n                                'rgba(103, 58, 183,1)'\n                            ],\n                            borderWidth: 1\n                        }\n                    ]\n                }\n            });\n            this.forceUpdate();\n        }\n    }\n    \n    dataForChart8 = () => {\n        //Toss Winners\n        var toss_winner = {};\n        if(Object.keys(this.state.rawMatch).length !== 0){\n            this.state.rawMatch.data.forEach(element => {\n                if(toss_winner[element.toss_winner] !== undefined) {\n                    toss_winner[element.toss_winner] += 1;\n                } else if(element.toss_winner !== undefined && element.toss_winner !== ' ') {\n                    toss_winner[element.toss_winner] = 1;\n                }\n            });\n\n            this.setState({\n                chartData8: {\n                    labels: [...Object.keys(toss_winner)],\n                    datasets: [\n                        {\n                            label: 'Toss Win',\n                            data: [...Object.values(toss_winner)],\n                            backgroundColor: [\n                                'rgba(233, 30, 99, 0.5)',\n                                'rgba(233, 30, 99, 0.5)',\n                                'rgba(233, 30, 99, 0.5)',\n                                'rgba(233, 30, 99, 0.5)',\n                                'rgba(233, 30, 99, 0.5)',\n                                'rgba(233, 30, 99, 0.5)',\n                                'rgba(233, 30, 99, 0.5)',\n                                'rgba(233, 30, 99, 0.5)',\n                                'rgba(233, 30, 99, 0.5)',\n                                'rgba(233, 30, 99, 0.5)',\n                                'rgba(233, 30, 99, 0.5)',\n                                'rgba(233, 30, 99, 0.5)',\n                                'rgba(233, 30, 99, 0.5)',\n                                'rgba(233, 30, 99, 0.5)'\n                            ],\n                            borderColor: [\n                                'rgba(233, 30, 99, 1)',\n                                'rgba(233, 30, 99, 1)',\n                                'rgba(233, 30, 99, 1)',\n                                'rgba(233, 30, 99, 1)',\n                                'rgba(233, 30, 99, 1)',\n                                'rgba(233, 30, 99, 1)',\n                                'rgba(233, 30, 99, 1)',\n                                'rgba(233, 30, 99, 1)',\n                                'rgba(233, 30, 99, 1)',\n                                'rgba(233, 30, 99, 1)',\n                                'rgba(233, 30, 99, 1)',\n                                'rgba(233, 30, 99, 1)',\n                                'rgba(233, 30, 99, 1)',\n                                'rgba(233, 30, 99, 1)'\n                            ],\n                            borderWidth: 1\n                        }\n                    ]\n                }\n            });\n            this.forceUpdate();\n        }\n    }\n    dataForChart9 = () => {\n        // Host Countries\n        let city = {};\n        \n        if(Object.keys(this.state.rawMatch).length !== 2){\n            this.state.rawMatch.data.forEach(element => {\n                if(city[element.city] !== undefined) {\n                    city[element.city] += 1;\n                } else {\n                    city[element.city] = 1;\n                }\n            });\n\n            this.setState({\n                chartData9: {\n                    labels: [...Object.keys(city)],\n                    datasets: [\n                        {\n                            label: 'Host Countries',\n                            data: [...Object.values(city)],\n                            backgroundColor: [\n                                'rgba(33, 150, 243,0.5)',\n                                'rgba(76, 175, 80,0.5)',\n                                'rgba(244, 67, 54,0.5)',\n                                'rgba(33, 150, 243,0.5)',\n                                'rgba(76, 175, 80,0.5)',\n                                'rgba(244, 67, 54,0.5)',\n                                'rgba(33, 150, 243,0.5)',\n                                'rgba(76, 175, 80,0.5)',\n                                'rgba(244, 67, 54,0.5)',\n                                'rgba(33, 150, 243,0.5)',\n                                'rgba(76, 175, 80,0.5)',\n                                'rgba(244, 67, 54,0.5)',\n                                'rgba(33, 150, 243,0.5)',\n                                'rgba(76, 175, 80,0.5)',\n                                'rgba(244, 67, 54,0.5)',\n                                'rgba(33, 150, 243,0.5)',\n                                'rgba(76, 175, 80,0.5)',\n                                'rgba(244, 67, 54,0.5)',\n                                'rgba(33, 150, 243,0.5)',\n                                'rgba(76, 175, 80,0.5)',\n                                'rgba(244, 67, 54,0.5)',\n                                'rgba(33, 150, 243,0.5)',\n                                'rgba(76, 175, 80,0.5)',\n                                'rgba(244, 67, 54,0.5)',\n                                'rgba(33, 150, 243,0.5)',\n                                'rgba(76, 175, 80,0.5)',\n                                'rgba(244, 67, 54,0.5)',\n                                \n                            ],\n                            borderColor: [\n                                'rgba(33, 150, 243,1.0)',\n                                'rgba(76, 175, 80,1.0)',\n                                'rgba(244, 67, 54,1.0)',\n                                'rgba(33, 150, 243,1.0)',\n                                'rgba(76, 175, 80,1.0)',\n                                'rgba(244, 67, 54,1.0)',\n                                'rgba(33, 150, 243,1.0)',\n                                'rgba(76, 175, 80,1.0)',\n                                'rgba(244, 67, 54,1.0)',\n                                'rgba(33, 150, 243,1.0)',\n                                'rgba(76, 175, 80,1.0)',\n                                'rgba(244, 67, 54,1.0)',\n                                'rgba(33, 150, 243,1.0)',\n                                'rgba(76, 175, 80,1.0)',\n                                'rgba(244, 67, 54,1.0)',\n                                'rgba(33, 150, 243,1.0)',\n                                'rgba(76, 175, 80,1.0)',\n                                'rgba(244, 67, 54,1.0)',\n                                'rgba(33, 150, 243,1.0)',\n                                'rgba(76, 175, 80,1.0)',\n                                'rgba(244, 67, 54,1.0)',\n                            ],\n                            borderWidth: 1\n                        }\n                    ]\n                }\n            });\n            this.forceUpdate();\n        }\n    }\n    dataForChart10 = () => {\n\n        var dismissalType = {};\n        if(Object.keys(this.state.rawBallByBall).length !== 0){\n            this.state.rawBallByBall.data.forEach(element => {\n                if(dismissalType[element.Dissimal_Type] !== undefined) {\n                    dismissalType[element.Dissimal_Type] += 1;\n                } else if(element.Dissimal_Type !== undefined && element.Dissimal_Type !== ' ') {\n                    dismissalType[element.Dissimal_Type] = 1;\n                }\n            });\n\n            this.setState({\n                chartData10: {\n                    labels: [...Object.keys(dismissalType)],\n                    datasets: [\n                        {\n                            label: 'Types of Dismissals',\n                            data: [...Object.values(dismissalType)],\n                            backgroundColor: [\n                                'rgba(233, 30, 99, 0.5)',\n                                'rgba(233, 30, 99, 0.5)',\n                                'rgba(233, 30, 99, 0.5)',\n                                'rgba(233, 30, 99, 0.5)',\n                                'rgba(233, 30, 99, 0.5)',\n                                'rgba(233, 30, 99, 0.5)',\n                                'rgba(233, 30, 99, 0.5)',\n                                'rgba(233, 30, 99, 0.5)',\n                                'rgba(233, 30, 99, 0.5)',\n                                'rgba(233, 30, 99, 0.5)',\n                                'rgba(233, 30, 99, 0.5)',\n                                'rgba(233, 30, 99, 0.5)',\n                                'rgba(233, 30, 99, 0.5)',\n                                'rgba(233, 30, 99, 0.5)'\n                            ],\n                            borderColor: [\n                                'rgba(233, 30, 99, 1)',\n                                'rgba(233, 30, 99, 1)',\n                                'rgba(233, 30, 99, 1)',\n                                'rgba(233, 30, 99, 1)',\n                                'rgba(233, 30, 99, 1)',\n                                'rgba(233, 30, 99, 1)',\n                                'rgba(233, 30, 99, 1)',\n                                'rgba(233, 30, 99, 1)',\n                                'rgba(233, 30, 99, 1)',\n                                'rgba(233, 30, 99, 1)',\n                                'rgba(233, 30, 99, 1)',\n                                'rgba(233, 30, 99, 1)',\n                                'rgba(233, 30, 99, 1)',\n                                'rgba(233, 30, 99, 1)'\n                            ],\n                            borderWidth: 1\n                        }\n                    ]\n                }\n            });\n            this.forceUpdate();\n        }\n      \n    }\n    dataForInfoBox1and2 = () => {        \n        // Number of Superovers\n        let superovers = 0;\n\n        if(Object.keys(this.state.rawMatch).length !== 0){\n            // Number of Matches\n            this.setState({\n                infoBox1: this.state.rawMatch.data.length - 1\n            });\n\n            for(var i = 0; i < this.state.rawMatch.data.length; i++){\n                if(this.state.rawMatch.data[i].result === 'tie'){\n                    superovers++;\n                }\n            }\n\n            this.setState({ infoBox2: superovers });\n        }\n    }\n\n    dataForInfoBox3and4 = () => {\n        // Number of Fours\n        let fours = 0;\n        let sixes = 0;\n        if(Object.keys(this.state.rawBallByBall).length !== 0){\n            this.state.rawBallByBall.data.forEach(element => {\n                if(element.Batsman_Scored === 4) {\n                    fours++;\n                }\n                else if(element.Batsman_Scored === 6) {\n                    sixes++;\n                }\n            });\n            this.setState({ infoBox3: fours, infoBox4: sixes });\n        }\n        this.forceUpdate();\n    }\n\n    render() {\n        /*==== Calculates current width of browser ====*/\n        let w = window,\n        d = document,\n        e = d.documentElement,\n        g = d.getElementsByTagName('body')[0],\n        x = w.innerWidth || e.clientWidth || g.clientWidth;\n\n        return (\n            <div className='content-container'>\n                <div className='title-container'>\n                    <h1><span className='bold'>Indian Premier League</span> Statistics</h1>\n                </div>\n                <div className='infobox-container'>\n                    <InfoBox data={this.state.infoBox1} title='Total Matches' icon={<i className=\"fas fa-cricket fa-4x\"></i>} text='Matches played till now.' />\n                    <InfoBox data={this.state.infoBox2} title='Total Superovers' icon={<i className=\"fas fa-cricket fa-4x\"></i>} text='Number of tie matches till now.' />\n                    <InfoBox data={this.state.infoBox3} title='Total Fours' icon={<i className=\"fas fa-cricket fa-4x\"></i>} text='Number of balls hitting the boundary.'  />\n                    <InfoBox data={this.state.infoBox4} title='Total Sixes' icon={<i className=\"fas fa-cricket fa-4x\"></i>} text='Number of balls crossing the boundary.'  />\n                </div>\n                <div className='graph-container'>\n                    \n                    <ChartDisplay \n                        selectChart='bar' \n                        displayLegend={false} \n                        chartData={this.state.chartData1} \n                        titleText='Batting / Fielding Decision' \n                    />\n                    <ChartDisplay \n                        selectChart='horizontalBar' \n                        displayLegend={false} \n                        chartData={this.state.chartData2} \n                        titleText='Bowling Skill' \n                    />\n                    <ChartDisplay \n                        selectChart='doughnut' \n                        chartData={this.state.chartData3} \n                        titleText='Result Type' \n                    />\n                     <ChartDisplay \n                        selectChart='pie' \n                        chartData={this.state.chartData4} \n                        titleText='Left / Right Handed Batsmen' \n                    />\n                     <ChartDisplay \n                        selectChart='horizontalBar' \n                        displayLegend={false} \n                        chartData={this.state.chartData5} \n                        titleText='Total Matches win' \n                    />\n                       <ChartDisplay \n                        selectChart='horizontalBar' \n                        displayLegend={false} \n                        chartData={this.state.chartData6} \n                        titleText='Player Nationality' \n                    />\n                    <ChartDisplay \n                        selectChart='line' \n                        chartData={this.state.chartData7} \n                        titleText='Average Runs Every Over' \n                        selectLabel={true} \n                        selectLabelText='Overs' \n                    />\n                    <ChartDisplay \n                        selectChart={x < 900 ? 'horizontalBar' : 'bar'} \n                        displayLegend={false} chartData={this.state.chartData8} \n                        titleText='Toss winners' \n                    />\n                     <ChartDisplay \n                        selectChart='bar' \n                        chartData={this.state.chartData9} \n                        titleText='Matches city' \n                        displayLegend={false}\n                    />\n                   \n                  \n                     <ChartDisplay \n                        selectChart='horizontalBar' \n                        displayLegend={false} \n                        chartData={this.state.chartData10} \n                        titleText='Type of  Dismissal' \n                    />\n                 \n                    \n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Content;"]},"metadata":{},"sourceType":"module"}